// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  username      String
  email         String      @unique
  pwHash        String
  createdWorlds World[]
  roles         WorldRole[]
  groups        UserGroup[]

  // Category Relations
  createdCategories DocumentCategory[]

  // Document relations
  createdDocuments  Document[] @relation("CreatedDocuments")
  readOnlyDocuments Document[] @relation("ReadOnlyDocuments")
  editableDocuments Document[] @relation("EditableDocuments")

  // Folder relations
  createdFolders  Folder[] @relation("CreatedFolders")
  readOnlyFolders Folder[] @relation("ReadOnlyFolders")
  editableFolders Folder[] @relation("EditableFolders")

  // Document Template relations
  createdDocumentTemplates  DocumentTemplate[] @relation("CreatedDocumentTemplates")
  readOnlyDocumentTemplates DocumentTemplate[] @relation("ReadOnlyDocumentTemplates")
  editableDocumentTemplates DocumentTemplate[] @relation("EditableDocumentTemplates")
}

model World {
  id         String             @id @default(uuid())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  name       String
  creator    User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId  String
  groups     UserGroup[]
  roles      WorldRole[]
  categories DocumentCategory[]

  documents         Document[]
  folders           Folder[]
  documentTemplates DocumentTemplate[]
  @@unique([name, creatorId])
}

model WorldRole {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  level   Int
  world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId String

  @@unique([userId, worldId])
}

model UserGroup {
  id      String @id @default(uuid())
  name    String
  world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId String
  users   User[]
}

model Document {
  id          String            @id @default(uuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  mentions    Document[]        @relation("linkedDocuments")
  mentionedIn Document[]        @relation("linkedDocuments")
  content     String
  name        String            @default("document")
  category    DocumentCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  folder      Folder?           @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?


  // Access Control
  accessLevel Int     @default(0)
  world       World   @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId     String
  creator     User?   @relation("CreatedDocuments", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId   String?
  readOnly    User[]  @relation("ReadOnlyDocuments")
  edit        User[]  @relation("EditableDocuments")
  @@unique([folderId, name])
}

model DocumentCategory {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  world     World      @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId   String
  name      String     @default("category")
  colour    String     @default("#333333")
  documents Document[]
  creator   User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId String?

  @@unique([worldId, name])
}

model Folder {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String     @default("folder")
  colour       String     @default("#333333")
  documents    Document[]
  subfolders   Folder[]   @relation("SubFolders")
  parentFolder Folder?    @relation("SubFolders", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String?


  // Access Control
  accessLevel Int     @default(0)
  world       World   @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId     String
  creator     User?   @relation("CreatedFolders", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId   String?
  readOnly    User[]  @relation("ReadOnlyFolders")
  edit        User[]  @relation("EditableFolders")
  @@unique([parentId, name])
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  content   String

  // Access Control

  accessLevel Int     @default(0)
  world       World   @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId     String
  creator     User?   @relation("CreatedDocumentTemplates", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId   String?
  readOnly    User[]  @relation("ReadOnlyDocumentTemplates")
  edit        User[]  @relation("EditableDocumentTemplates")

  @@unique([name, worldId])
}
