// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"

}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model User {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  username      String
  email         String      @unique
  pwHash        String
  createdWorlds World[]
  roles         WorldRole[]
  groups        UserGroup[]

  // Category Relations
  createdCategories DocumentCategory[]

  // Object relations
  createdObjectAccessControls  ObjectAccessControl[] @relation("CreatedObjects")
  readOnlyObjectAccessControls ObjectAccessControl[] @relation("ReadOnlyObjects")
  editableObjectAccessControls ObjectAccessControl[] @relation("EditableObjects")
}

model World {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  name                 String
  creator              User                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  groups               UserGroup[]
  roles                WorldRole[]
  categories           DocumentCategory[]
  documents            Document[]
  folders              Folder[]
  documentTemplates    DocumentTemplate[]
  objectAccessControls ObjectAccessControl[]

  @@unique([name, creatorId])
}

model WorldRole {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  level   Int
  world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId String

  @@unique([userId, worldId])
}

model UserGroup {
  id      String @id @default(uuid())
  name    String
  world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId String
  users   User[]
}

model Document {
  id             String            @id @default(uuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  mentions       Document[]        @relation("linkedDocuments")
  mentionedIn    Document[]        @relation("linkedDocuments")
  name           String            @default("document")
  category       DocumentCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId     String?
  parentFolder   Folder?           @relation(fields: [parentFolderId], references: [id], onDelete: Cascade)
  parentFolderId String?
  sections       DocumentSection[]


  // Access Control
  objectAccessControl   ObjectAccessControl @relation(fields: [objectAccessControlId], references: [id])
  world                 World               @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId               String
  objectAccessControlId String              @unique
  @@unique([parentFolderId, name])
}

model ObjectAccessControl {
  id String @id @default(uuid())

  // Access Control
  readAccessLevel  Int               @default(1)
  writeAccessLevel Int               @default(0)
  world            World             @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId          String
  creator          User?             @relation("CreatedObjects", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId        String?
  readOnly         User[]            @relation("ReadOnlyObjects")
  edit             User[]            @relation("EditableObjects")
  type             String
  document         Document?
  documentSection  DocumentSection?
  folder           Folder?
  documentTemplate DocumentTemplate?
}

model DocumentSection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  priority  Int

  objectAccessControl ObjectAccessControl @relation(fields: [objectAccessControlId], references: [id])

  objectAccessControlId String       @unique
  document              Document     @relation(fields: [documentId], references: [id])
  documentId            String
  type                  String?
  name                  String?
  textSection           TextSection?
}

model TextSection {
  id      String @id @default(uuid())
  content String @default("")

  section           DocumentSection @relation(fields: [documentSectionId], references: [id], onDelete: Cascade)
  documentSectionId String          @unique
}

model DocumentCategory {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  world     World      @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId   String
  name      String     @default("category")
  colour    String     @default("#333333")
  documents Document[]
  creator   User?      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId String?

  @@unique([worldId, name])
}

model Folder {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String     @default("folder")
  colour         String     @default("#333333")
  documents      Document[]
  subfolders     Folder[]   @relation("SubFolders")
  parentFolder   Folder?    @relation("SubFolders", fields: [parentFolderId], references: [id], onDelete: Cascade)
  parentFolderId String?


  // Access Control
  objectAccessControl   ObjectAccessControl @relation(fields: [objectAccessControlId], references: [id])
  objectAccessControlId String              @unique


  world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId String
  @@unique([parentFolderId, name])
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  content   String

  objectAccessControl   ObjectAccessControl @relation(fields: [objectAccessControlId], references: [id])
  objectAccessControlId String              @unique
  world                 World               @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId               String


  @@unique([name, worldId])
}
